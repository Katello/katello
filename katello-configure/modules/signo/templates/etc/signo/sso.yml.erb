---
:common:
#  # turn this to true if your relay parties use SSL
#  # this also makes sure that relay parties using old rack (<= 1.2) will be served properly
#  enforce_ssl: true
#  # directory with certificate of CA in pem format, note that every certificate in this directory
#  # is considered so it should not be writable by anybody
#  ca_file: '/etc/candlepin/certs/candlepin-ca.crt'

  # relay parties that we can trust, this list should contain every application
  # that wants to use this application for SSO
  :whitelist:
   - localhost
   - <%= scope.lookupvar('fqdn') -%>

#  # suburi on which signo resides
#  url_prefix: '/signo'
#
#  # configuration of all authentication backends
  :backends:
#    # these backends will be used to authenticate user (order is significant)
#    # user is authenticated if one of backends succeed
#    :enabled:
#     - katello
    :katello:
      # on which url we should authenticate users against katello
      :url: https://<%= scope.lookupvar('fqdn') -%>/katello/authenticate
#    :ldap:
#      host: localhost
#      port: 389
#       ## blank or :start_tls
#      encryption:
#      ## baseDN for ldap auth, eg dc=redhat,dc=com
#      base_dn: ou=People,dc=my-domain,dc=com
#      ##baseDN for your ldap groups, eg ou=Groups,dc=redhat,dc=com
#      group_base: ou=Groupd,dc=my-domain,dc=com
#      ## type of server. default == posix. :active_directory, :posix, :free_ipa
#      server_type: :posix
#      ## domain for your users if using active directory, eg redhat.com
#      ad_domain:
#      ## service account for authenticating ldap calls in active directory or ipa
#      service_user:
#      ## service password for authenticating ldap calls in active directory or ipa
#      service_pass:
#      ## allow anonymous queries for AD or FreeIPA
#      anon_queries:
#
#  # here you can set length of cookies and session life, values are in hours
#  # we want to store cookie with username for 1 year, it's just for better UX (username prefilled)
#  cookie_life: <%= 24 * 356 %>
#  # for how long user is logged in to this application, every request refreshes the timeout
#  session_life: 10
#
#  # when adding a new logger don't forget to add it in here even if it's disabled by default
#  # otherwise log trace feature won't work for such logger
#  logging:
#    # enable logging output inline in rails console
#    console_inline: true
#    # colorize log including level token based on severity
#    colorize: false
#    # adds an extra line after each log message with information from which file:line and method
#    # was this message logged
#    log_trace: false
#    # configuration of all loggers used in app
#    loggers:
#      # this logger is parent of all other loggers, by default this is the only one having appender
#      # which is used by all other loggers
#      root:
#        # only messages with severity >= this level from all loggers will be logged
#        level: warn
#        # file or syslog, for file variant you can specify other options below like filename,
#        # pattern or rolling options
#        type: file
#        # 'daily', 'weekly', 'monthly' or number as seconds
#        age: 'weekly'
#        # how many old log files to keep (156 = 52 * 3 = 3 years for weekly age)
#        keep: 156
#        # logger line pattern, you can use following macros
#        #  [%c] name of the logger that generate the log event
#        #  [%d] datestamp
#        #  [%m] the user supplied log message
#        #  [%p] PID of the current process
#        #  [%r] the time in milliseconds since the program started
#        #  [%T] the name of the thread Thread.current[:name]
#        #  [%t] object_id of the thread
#        #  [%F] filename where the logging request was issued
#        #  [%L] line number where the logging request was issued
#        #  [%M] method name where the logging request was issued
#        #  [%X{string}] variable set using ::Logging.mdc['string'] =
#        pattern: "[%5l %d %c %X{uuid} #%p] %m\n"
#        # log filename for this environment, it will be placed into #{Rails.root}/log directory
#        filename: "production.log"
#        # you log files will be stored here
#        # note when you log outside of standard rails path you won't see log output in WEBrick
#        # STDOUT (usually not wanted in development), to use Rails default path, don't set path
#        # path: /var/log/katello
#
#      # you can configure each logger individually, you can turn it off completely by using key
#      # 'enabled' or you can adjust it's logging 'level'. If you specify level higher than root
#      # logger has, messages below this level are ignored. If you specify lower level than root
#      # they are still ignored but you can add appender in Katello::Logging just for this logger
#      # and see these logs outside of main log.
#      app:
#        enabled: true
#      katello:
#        enabled: true
#      auth:
#        enabled: true
#      openid:
#        enabled: true
