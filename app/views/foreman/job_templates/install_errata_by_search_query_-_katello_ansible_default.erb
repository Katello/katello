<%#
kind: job_template
name: Install errata by search query - Katello Ansible Default
job_category: Katello via Ansible
description_format: 'Install errata %{Errata search query}'
feature: katello_errata_install_by_search
provider_type: Ansible
template_inputs:
- name: Errata search query
  description: Filter criteria for errata to be installed.
  input_type: user
  required: false
%>

<% advisory_ids = @host.advisory_ids(search: input("Errata search query")) -%>
<% render_error(N_("No errata matching given search query")) if !input("Errata search query").blank? && advisory_ids.blank? -%>
# RESOLVED_ERRATA_IDS=<%= advisory_ids.join(',') %>

<%= snippet_if_exists(template_name + " custom pre") %>
<% if @host.operatingsystem.family == 'Suse' -%>
<%= render_template('Run Command - Ansible Default', :command => "zypper -n install -t patch #{advisory_ids.join(' ')}") %>
<% else -%>
<% advisories = advisory_ids.map { |e| "--advisory=#{e}" }.join(' ') -%>
---
- hosts: all
  tasks:
    - name: Collect bootc status
      shell:
        cmd: 'bootc status --json'
      register: bootc_status
      ignore_errors: true
    - name: Parse bootc status json
      set_fact:
        bootc_status_json: "{{ bootc_status.stdout | from_json }}"
      when: bootc_status.rc == 0
    - name: Install errata via dnf for image mode machines
      shell:
        cmd: 'dnf -y --transient update-minimal <%= advisories %>'
      register: out
      when: bootc_status_json is defined and bootc_status_json['status']['booted'] != 'null'
    - name: Install errata normally
      shell:
        cmd: 'yum -y update-minimal <%= advisories %>'
      register: out
      when: bootc_status_json is not defined or bootc_status_json['status']['booted'] == 'null'
    - debug: var=out
<% end -%>
<%= snippet_if_exists(template_name + " custom post") %>
