= javascript :edit, :edit_helpers, :tabs, :provider_redhat
= include_javascripts :treetable
= stylesheet :tabs, :dashboard
= include_common_i18n
= include_editable_i18n

.grid_16
  = help_tip_button('subscriptions-help')
  = help_tip(_("Listed below are the subscriptions information." + |
             " If you have a subscription manifest you may upload it below. " + |
             "This manifest may be obtained by visiting the Red Hat Customer Portal or by contacting your support representative."), 'subscriptions-help') |

.grid_6
  #providers
    %input#panel_element_id{:name => @provider.id, :type => "hidden", :value => "#{@provider.name}_#{@provider.id}"}
    #provider
      %h4 #{_("Red Hat Provider Details")}
      %fieldset.fl.clear
        .grid_5
          %label #{_("Repository Url")}:
        .grid_5.la.editable.edit_textfield{'name' => 'provider[repository_url]', 'data-url' => provider_path(@provider.id)} #{@provider[:repository_url]}
  %br.clearfloat
  #subscription_manifest
    %h4 #{_("Upload Subscription Manifest")}
    = form_for @provider, :html => {:multipart => true, :method => :post, :id => :upload_manifest}, :remote => true, :url => redhat_provider_providers_path do |f|
      .grid_4
        = f.label :upload, _("Specify Local Manifest")
        = f.file_field :contents
      #upload_button.fr
        = f.submit _("Upload")

.grid_10
  #tabs
    %nav.tab_details
      %ul
        %li
          %a{:href => "#tabs-1"}
            = _("Subscription")
        %li
          %a{:href => "#tabs-2"}
            = _("Import History")
    #tabs-1
      .tree
        %table#redhatSubscriptionTable
          %thead
            %th{:style => "width: 80%"} #{_("Name")}
            %th #{_("Consumed")}
          %tbody
            - if @grouped_subscriptions.length > 0
              - @grouped_subscriptions.each do |group_name, sub_group|
                - cycle_class = cycle("", "alt")
                - if sub_group.length > 1
                  %tr{:id => "#{group_name}", :class => cycle_class}
                    %td
                      -# The group's name is just the product name of the first element in array
                      = sub_group[0]["productName"]
                    %td
                  - sub_class = "child-of-#{group_name}"
                - else
                  - sub_class = "#{group_name}"
                - sub_group.each do |sub|
                  %tr{:id => "#{sub["subscriptionId"]}", :class => "#{sub_class} #{cycle_class}"}
                    %td
                      = sub["productName"]
                    %td
                      = "#{sub["consumed"]} of #{sub["quantity"]}"
                  -# TODO: Should the bundled products be displayed too?
                  -# - if sub["providedProducts"].length > 0
                  -#   %tr{:class => "child-of-#{sub["subscriptionId"]} #{cycle_class}"}
                  -#     %td{:colspan=>7}
                  -#       = _("Bundled Products:")
                  -# - sub["providedProducts"].each do |product|
                  -#   %tr{:class => "child-of-#{sub["subscriptionId"]} #{cycle_class}"}
                  -#     %td{:colspan=>7}
                  -#       %ul
                  -#         %li
                  -#           &nbsp;&nbsp;
                  -#           = product["productName"]
                  -#         -# - product.productContent.each do |product_content|
                  -#         -#   = render :partial=>'subscription_details', :locals=>{:group => sub["subscriptionId"], :product_content => product_content}
            - else
              %tr
                %td{:colspan=>5} #{_("No subscriptions have been imported.")}
    #tabs-2
      %table
        %thead
          %th #{_("Message")}
          %th #{_("Import Time")}
        %tbody
        - if @statuses
          - @statuses.each do |status|
            %tr{:class => cycle(nil, 'alt')}
              %td{:style => "width: 70%;"}
                %span.icon_wrap.fl
                  %span.fl{:class => (status["status"] == "FAILURE" ? "failure_icon" : "success_icon")}
                = status["statusMessage"]
              %td
                = _("%s ago") % time_ago_in_words(status["created"])
