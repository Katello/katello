= javascript :edit, :edit_helpers, :tabs
= stylesheet :tabs
= include_common_i18n
= include_editable_i18n

.grid_16
  = help_tip_button('subscriptions-help')
  = help_tip(_("Listed below are the subscriptions information." + |
             " If you have a subscription manifest you may upload it below. " + |
             "This manifest may be obtained by visiting the Red Hat Customer Portal or by contacting your support representative."), 'subscriptions-help') |

.grid_6
  #providers
    %input#panel_element_id{:name => @provider.id, :type => "hidden", :value => "#{@provider.name}_#{@provider.id}"}
    #provider
      %h4 #{_("Red Hat Provider Details")}
      %fieldset.fl.clear
        .grid_5
          %label #{_("Repository Url")}:
        .grid_5.la.editable.edit_textfield{'name' => 'provider[repository_url]', 'data-url' => provider_path(@provider.id)} #{@provider[:repository_url]}
  %br.clearfloat
  #subscription_manifest
    %h4 #{_("Upload Subscription Manifest")}
    = form_for @provider, :html => {:multipart => true, :method => :post, :id => :upload_manifest}, :remote => true, :url => redhat_provider_providers_path do |f|
      .grid_4
        = f.label :upload, _("Specify Local Manifest")
        = f.file_field :contents
      #upload_button.fr
        = f.submit _("Upload")

.grid_10
  #tabs
    %nav.tab_details
      %ul
        %li
          %a{:href => "#tabs-1"}
            = _("Current Subscriptions")
        %li
          %a{:href => "#tabs-2"}
            = _("Import History")
    #tabs-1
      %table
        %thead
          %th{:style => "width: 80%"} #{_("Name")}
          %th #{_("Consumed")}
        %tbody
        - @subscriptions.each do |sub|
          %tr{:class => cycle(nil, 'alt')}
            %td
              = sub["productName"]
            %td
              = "#{sub["consumed"]} of #{sub["quantity"]}"
    #tabs-2
      %table
        %thead
          %th #{_("Message")}
          %th #{_("Status")}
          %th #{_("Import Time")}
        %tbody
        - if @statuses
          - @statuses.each do |status|
            %tr{:class => cycle(nil, 'alt')}
              %td
                = status["statusMessage"]
              %td
                = status["status"]
              %td
                = _("%s ago") % time_ago_in_words(status["created"])
