.tree
  %table#redhatSubscriptionTable
    %thead
      %th= _("Name")
      %th= _("Consumed")
      %th= _('Contract')
      %th= _('Support Level')
      %th= _('Arch')
      %th= _('Begins')
      %th= _('Expires')
    %tbody
      - if @grouped_subscriptions.length > 0
        - @grouped_subscriptions.each do |group_name, sub_group|
          - cycle_class = cycle("ra", "ra.alt")
          - if sub_group.length > 1
            %tr{:id => "#{group_name}", :class => cycle_class}
              %td
                -# The group's name is just the product name of the first element in array
                = sub_group[0]["productName"]
              %td{:colspan => 7}
            - sub_class = "child-of-#{group_name}"
          - else
            - sub_class = "#{group_name}"
          - sub_group.each do |sub|
            %tr{:id => "#{sub["subscriptionId"]}", :class => "#{sub_class} #{cycle_class}"}
              %td= sub['productName']
              %td
                - if sub['quantity'] < 0
                  = _('Unlimited')
                -else
                  = "#{sub['consumed']} of #{sub['quantity']}"
              %td= sub['contractNumber']
              %td= sub['support_level'] or ""
              %td= sub['arch'] or ""
              %td=l Date.parse(sub['startDate'])
              %td=l Date.parse(sub['endDate'])
            -# TODO: Should the bundled products be displayed too?
            -# - if sub["providedProducts"].length > 0
            -#   %tr{:class => "child-of-#{sub["subscriptionId"]} #{cycle_class}"}
            -#     %td{:colspan=>7}
            -#       = _("Bundled Products:")
            -# - sub["providedProducts"].each do |product|
            -#   %tr{:class => "child-of-#{sub["subscriptionId"]} #{cycle_class}"}
            -#     %td{:colspan=>7}
            -#       %ul
            -#         %li
            -#           &nbsp;&nbsp;
            -#           = product["productName"]
            -#         -# - product.productContent.each do |product_content|
            -#         -#   = render :partial=>'subscription_details', :locals=>{:group => sub["subscriptionId"], :product_content => product_content}
      - else
        %tr
          %td{:colspan=>8} #{_("No subscriptions have been imported.")}
