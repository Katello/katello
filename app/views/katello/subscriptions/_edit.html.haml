= javascript "widgets/jquery.jeditable.helpers"
= render :partial=>"subscriptions_tupane_header_nav"

= content_for :content do
  #subscription
    %form.form
      %input#panel_element_id{:name=>@subscription.id, :type=>"hidden", :value=>"#{name}_#{subscription.id.to_s}", "data-ajax_url"=>url_for(:action=>"update")}
        %h5 #{_("Subscription Info")}
        .control-group
          .label
            = label :name, :name, _("Name")
          .input
            .value
              = @subscription.product_name
        .control-group
          .label
            = label :name, :name, _("Description")
          .input
            .value
              = @subscription.description
        .control-group
          .label
            = label :consumed, :consumed, _("Consumed")
          .input
            .value
              - if @subscription.quantity < 0
                = _("Unlimited")
              - else
                = _("%{consumed} of %{total}") % {:consumed => @subscription.consumed, :total => @subscription.quantity}
        .control-group
          .label
            = label :date_range, :date_range, _("Starts / Ends")
          .input
            .value
              = _("%{start_date} / %{end_date}") % {:start_date => format_time(@subscription.start_date), :end_date => format_time(@subscription.end_date)}
        .control-group
          .label
            = label :contract, :contract, _("Contract Number")
          .input
            .value
              = @subscription.contract_number
        .control-group
          .label
            = label :account, :account, _("Account Number")
          .input
            .value
              = @subscription.account_number
        .control-group
          .label
            = label :supportLevel, :supportLevel, _("Support Level")
          .input
            .value
              = @subscription.support_level
        .control-group
          .label
            = label :supporttype, :supporttype, _("Support Type")
          .input
            .value
              = @subscription.support_type
        .control-group
          .label
            = label :arch, :arch, _("Arch")
          .input
            .value
              = @subscription.arch
        .control-group
          .label
            = label :systype, :systype, _("Type")
          .input
            .value
              = @subscription.virt_only ? _("Virtual Only") : _("Physical or Virtual")
        .control-group
          .label
            = label :limits, :limits, _("Limits")
          .input
            .value
              = subscription_limits_helper(@subscription)
        .control-group
          .label
            = label :multientitlement, :multientitlement, _("Multi-entitlement")
          .input
            .value
              = @subscription.multi_entitlement ? _("Yes") : _("No")
        .control-group
          .label
            = label :instance_based, :instance_based, _("Instance-based")
          .input
            .value
              = @subscription.instance_multiplier ? _("Yes") : _("No")
        - if @subscription.stacking_id != ''
          .control-group
            .label
              = label :stacking, :stacking, _("Stacking ID")
            .input
              .value
                = @subscription.stacking_id
        - if !@subscription.source_pool_id.nil?
          .control-group
            .label
              = label :sourcepool, :sourcepool, _("Virt Guest From")
            .input
              .value
                = subscriptions_pool_link_helper(@subscription.product_name, @subscription.source_pool_id, current_organization.redhat_provider.id, current_organization)
        - if !@subscription.host_id.nil?
          .control-group
            .label
              = label :host, :host, _("Required Host")
            .input
              .value
                = subscriptions_system_link_helper @subscription.host_id
      - if @subscription.provided_products.length > 0
        %h5 #{_("Provided Products")}
        .control-group
          .input
            - @subscription.provided_products.each do |providedProduct|
              .grid_8.la
                = providedProduct['productName']

= render :template => "layouts/tupane_layout"
