= javascript do
  :plain
    KT.current_environment_id = #{system.environment_id};
    KT.available_environments = $.parseJSON('#{escape_javascript(environments.to_json)}');
    KT.current_content_view_id = #{system.content_view_id || -1};
    KT.available_content_views = $.parseJSON('#{escape_javascript(system.environment.content_views.readable(current_organization).to_json)}');

    localize({
        "systemReleaseVerDefault": '#{escape_javascript(_("System Default"))}',
        "contentViewReset": 'The selected content view was unset. Please choose another one.'
    });

= javascript 'katello/widgets/jquery.jeditable.helpers', 'katello/systems/system_edit'
= render :partial => "system_tupane_header_nav"

= content_for :content do
  #system
    %form.form
      %input#panel_element_id{:name => @system.id, :type => "hidden", :value => "#{name}_#{system.id.to_s}", "data-ajax_url"=>url_for(:action=> 'update')}
        %h5 #{_("Basic Information")}
        .control-group
          .label
            = label :id, :id, _("ID")
          .input
            .value
              = system.id
        .control-group
          .label
            = label :id, :id, _("UUID")
          .input
            .value
              = system.uuid
        %h5 #{_("Subscription Status Details")}
        .control-group
          .label
            = label :reason, :reason, _('Subscription Status')
          .input
            .product
              .status_icon{:class => "#{system.compliance_color}"}
            .value
              = system_status_message(system)
        .control-group
          .label
            =label :details, :details, _("Details")
          .input
            %span.value
              %table#details_table
                - system.compliance['reasons'].each do |reason|
                  %tr
                    %td.interface_name
                      = reason['attributes']['name']
                    %td.interface_addr
                      = reason['message']
        %h5 #{_("Networking")}
        .control-group
          .label
            = label :hostname, :hostname, _("Hostname")
          .input
            %span.value
              = system.hostname
        .control-group
          .label
            = label :interfaces, :interfaces, _("Interfaces")
          .input
            %span.value
              %table#details_table
                - system.interfaces.each do |interface|
                  %tr
                    %td.interface_name
                      = interface[:name]
                    %td.interface_addr
                      = interface[:addr]

        %h5 #{_("System Properties")}
        .control-group
          .label
            = label :system, :name, _("Name")
          .input
            %span.value{'name' => 'system[name]', :class=>("editable edit_panel_element" if editable), 'data-url'=>system_path(system.id)} #{system[:name]}
        .control-group
          .label
            = label :system, :description, _("Description")
          .input
            %span.value{'name' => 'system[description]', :class=>("editable edit_textarea" if editable), 'data-maxlength' => default_description_limit, 'data-url'=>system_path(system.id)} #{system[:description]}
        .control-group
          .label
            = label :os, :os, _("OS")
          .input
            %span.value
              = system.distribution_name
        .control-group
          .label
            = label :release, :release, _("Release")
          .input
            %span.value
              = system.kernel
        .control-group
          .label
            - help_message = _("Setting the release version limits content to this version only, preventing newer packages from being available for installation.")
            %span.tipsify.details_icon-grey{:title => help_message}
            = label :releaseVer, :releaseVer, _("Release Version")
          .input
            - if !releases_error.nil?
              %span.value{'name' => 'system[releaseVer]', 'class' => ("editable edit_select_system_releasever_message error_message" if editable), 'data-url'=>system_path(system.id), 'data-message'=>releases_error}
                = system.release == "" ? _("System Default") : system.release
            - elsif releases == []
              - if Katello.config.katello?
                - none_message = ("No alternate release version choices are available. These choices are based upon the repositories that have been enabled and promoted to this system's environment.")
              - else
                - none_message = _("No alternate release version choices are available. These choices are based upon the Red Hat manifest imported and the content available in the CDN.")
              %span.value{'name' => 'system[releaseVer]', 'class' => ("editable edit_select_system_releasever_message" if editable), 'data-url'=>system_path(system.id), 'data-message'=>none_message}
                = system.release == "" ? _("System Default") : system.release
            - else
              %span.value{'name' => 'system[releaseVer]', 'class' => ("editable edit_select_system_releasever" if editable), 'data-url' => system_path(system.id), 'data-options' => system_releasevers_edit(system, releases)}
                = system.release
        .control-group
          .label
            = label :arch, :arch, _("Arch")
          .input
            %span.value
              = System.architectures[system.arch]
        .control-group
          .label
            = label :memory, :memory, _("RAM (GB)")
          .input
            %span.value
              = system.memory
        .control-group
          .label
            = label :sockets, :sockets, _("Sockets")
          .input
            %span.value
              = system.sockets
        .control-group
          .label
            = label :location, :location, _("Location")
          .input
            %span.value{'name' => 'system[location]', :class=>("editable edit_textfield" if editable), 'data-url'=>system_path(system.id)} #{system[:location]}

        - if Katello.config.katello?
          %h5 #{_("Content Available From")}
          .control-group
            .label
              = label :arch, :arch, _("Environment")
            .input
              %span.value#environment_path_selector{'data-name'=> 'system[environment_id]'}
          .control-group
            .label
              = label :content_view, :content_view, _("Content View")
            .input
              %span.value#content_view_selector{'data-name' => 'system[content_view_id]', 'data-options' => system_content_view_opts(system)}
          .control-group#env_content_view_selector_buttons{'data-url'=>system_path(system.id)}

        %h5 #{_("System Events")}
        .control-group
          .label
            = label :checked_in, :checked_in, _("Checked In")
          .input
            %span.value
              = get_checkin(system)
        .control-group
          .label
            = label :registered_date, :registered_date, _("Registered")
          .input
            %span.value
              = convert_time(system.created)
        .control-group
          .label
            = label :last_booted, :last_booted, _("Last Booted")
          .input
            %span.value
              = _("None")
        .control-group
          .label
            = label :host_guest, :activation_key, _("Activation Key")
          .input
            %span.value
              - if @system.activation_keys.blank?
                = _("None")
              - else
                - @system.activation_keys.each do |key|
                  %table#details_table
                    %tr
                      %td
                        - if ActivationKey.readable? key.organization
                          = link_to key.name, activation_keys_path(:anchor => "/!=&panel=activation_key_#{key.id}")
                        - else
                          = key[:name]

        %h5 #{_("Host & Guest Info")}
        .control-group
          .label
            = label :host_guest, :host_type, _("System Type")
          .input
            %span.value
              = system_type(system)

        .control-group
          - if system.guest == 'true'
            .label
              = label :host_guest, :host, _("Host")
            .input
              %span.value
                - if system.host
                  - if system.host.id
                    = link_to(system.host.attributes['name'],
                                        systems_path(:anchor => "/!=&panel=system_#{system.host.id}"))
                  - else
                    = system.host.attributes['name']
                - else
                  = _("Unknown")
          -else
            .label
              = label :host_guest, :guest, _("Guests")
            .input
              %span.value
                - if system.guests.length < 1
                  = _("None")
                - else
                  %ul
                  - system.guests.each do |guest|
                    %li{:style=>'list-style: none;'}
                      - if guest.id
                        = link_to(guest.attributes['name'],
                                  systems_path(:anchor => "/!=&panel=system_#{guest.id}"))
                      - else
                        = guest.attributes['name']

= render :template => "katello/layouts/tupane_layout"
