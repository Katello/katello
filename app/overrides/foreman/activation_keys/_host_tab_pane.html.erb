<%= javascript_tag do %>

$(function() {
    var KT_AK_LABEL = "<%= kt_ak_label %>";
    var availableActivationKeys = {};

    function ktLoadActivationKeys() {
        var selectedOrgEnvCv = ktSelectedOrgEnvCv();
        if(selectedOrgEnvCv[0]) {
            ktAkTab().show();
        } else {
            ktAkTab().hide();
            return; //no Katello-specific env selected
        }

        $("#ak-subscriptions-info").hide();
        $("#ak-subscriptions-spinner").show();

        var ktOrgLabel = selectedOrgEnvCv[0],
            ktEnvLabel = selectedOrgEnvCv[1],
            ktCvLabel = selectedOrgEnvCv[2],
            ktAkeyQuery = {};

        // Retrieve the activation keys.  In order to do this, need to
        // first retrieve content view & environment and then use the
        // ids from the results to retrieve the keys.  In the future,
        // we can simplify this logic; however, currently porting of
        // logic from existing foreman-katello-engine.
        $.ajax({
            type: 'get',
            url:  foreman_url('/katello/api/organizations/' + ktOrgLabel + '/content_views'),
            data: {'label': ktCvLabel},
            success: function(response) {
                if (response[0]) {
                    ktAkeyQuery['content_view_id'] = response[0].id;

                    $.ajax({
                        type: 'get',
                        url:  foreman_url('/katello/api/organizations/' + ktOrgLabel + '/environments'),
                        data: {'label': ktEnvLabel},
                        success: function(response) {
                            if (response[0]) {
                                ktAkeyQuery['environment_id'] = response[0].id;

                                $.ajax({
                                    type: 'get',
                                    url:  foreman_url('/katello/api/v2/environments/' + ktAkeyQuery['environment_id'] + '/activation_keys'),
                                    data: {'content_view_id': ktAkeyQuery['content_view_id']},
                                    success: function(response) {
                                        availableActivationKeys = {};
                                        $.each(response['results'], function (i, key) {
                                            availableActivationKeys[key.name] = [];
                                            $.each(key.pools, function (j, pool) {
                                                availableActivationKeys[key.name].push(pool.productName);
                                            });
                                        });
                                        ktAkUpdateSubscriptionsInfo();
                                    },
                                    error: ktErrorLoadingActivationKeys
                                });

                            }
                        },
                        error: ktErrorLoadingActivationKeys
                    });
                }
            },
            error: ktErrorLoadingActivationKeys
        });
    }

    function ktErrorLoadingActivationKeys(error) {
        $.jnotify("Error while loading activation keys from Katello", { type: "error", sticky: true });
        ktAkUpdateSubscriptionsInfo();
    }

    function ktFindParamContainer(name){
        var ret;
        $("div#parameters table.row input[ type = 'text']").each(function () {
            element = $(this);
            if(element.val() == name) {
                ret = element.closest('table.row');
                return false;
            }
        });
        return ret;
    }

    function ktOrganizations() {
        return $.grep($("#organizations #hostgroup_organization_ids option"), function (el) {
            return $(el).text().trim().match(/^KT-/)
        });
    }

    function ktParseOrgName(frOrgName) {
        return frOrgName.match(/^kt-\[(.*)\]\[(.*)\]$/);
    }

    function ktHideParams() {
        var paramsToHide = [ktFindParamContainer(KT_AK_LABEL),
                            ktFindParamContainer('kt_org'),
                            ktFindParamContainer('kt_env'),
                            ktFindParamContainer('kt_cv')];
        $.each(paramsToHide, function (i, paramContainer) {
            if(paramContainer) {
                paramContainer.hide();
            }
        });
    }

    function ktSelectedOrgEnvCv() {
        var selectedEnvId = $("#hostgroup_environment_id").val();
        var selectedOption = $("#hostgroup_environment_id option[ value ='" + selectedEnvId + "' ]");

        var ktEnvOption, ktCvOption, ktOrgLabel, ktEnvLabel, ktCvLabel;
        var ktEnvId = selectedOption.attr('data-katello-id');
        if(ktEnvId) {
            var idParts = ktEnvId.split('/');
            ktOrgLabel  = idParts[0];
            ktEnvLabel  = idParts[1];
            ktCvLabel   = idParts[2];
        }
        return [ktOrgLabel, ktEnvLabel, ktCvLabel];
    }

    function ktSetParam(name, value) {
        var paramContainer = ktFindParamContainer(name);
        if(value) {
            if(! paramContainer) { // we create the param for kt_activation_keys
                $("div#parameters a.btn-success").click();
                paramContainer = $("div#parameters table.row").last();
                paramContainer.find("input").val(name);
            }
            paramContainer.find("textarea").val(value);
        } else if(paramContainer) {
            // we remove the param by setting destoy to 1
            paramContainer.find("input[ type = 'hidden' ]").val(1);
        }
    }

    function ktEnvToParam() {
        var orgEnvCv = ktSelectedOrgEnvCv() || [];
        ktSetParam('kt_org', orgEnvCv[0]);
        ktSetParam('kt_env', orgEnvCv[1]);
        ktSetParam('kt_cv',  orgEnvCv[2]);
    }

    function ktEnvToFrOrganizations() {
        var orgEnvCv = ktSelectedOrgEnvCv() || [];

        var orgName = "";
        if(orgEnvCv[0]) {
            orgName = 'KT-[' + orgEnvCv[0] + ']';
        }

        $.each(ktOrganizations(), function (i, option) {
            if(orgName == $(option).text().trim()) {
                $("#hostgroup_organization_ids").multiSelect('select', $(option).val());
            } else {
                $("#hostgroup_organization_ids").multiSelect('deselect', $(option).val());
            }
        });
    }

    function ktParamToAkInput() {
        var paramContainer = ktFindParamContainer(KT_AK_LABEL);
        if(paramContainer) {
            $("#kt_activation_keys").val(paramContainer.find("textarea").val());
        }
    }

    function ktAkInputToParam() {
        var ktActivationKeysValue = $("#kt_activation_keys").val().replace(/,\s*/g,",").replace(/,$/g,"");
        ktSetParam(KT_AK_LABEL, ktActivationKeysValue);
    }

    function ktAkUpdateSubscriptionsInfo() {
        var subsInfo = $("ul#ak-subscriptions-info");
        subsInfo.empty();
        var selectedKeys = $("#kt_activation_keys").val().split(/,\s*/);
        $.each(selectedKeys, function(i, key) {
          if(availableActivationKeys[key]) {
            // hack to make it working with deface
            var ul = "<ul>", ul_end = "</ul>", li = "<li>", li_end = "</li>";
            content = li + key + ul;
            if(!availableActivationKeys[key].length == 0) {
                content += li;
                content += availableActivationKeys[key].join(li_end + li);
                content += li_end;
            }
            content +=  ul_end + li_end;
            subsInfo.append(content);
          }
        });
        $("#ak-subscriptions-info").show();
        $("#ak-subscriptions-spinner").hide();
    }

    function ktAkTab() {
        return $('li#activation_keys_tab');
    }

    function ktOnLoad() {
        ktHideParams();
        ktParamToAkInput();
        ktLoadActivationKeys();
    };

    function ktOnSubmit() {
        ktAkInputToParam();
        ktEnvToParam();
        ktEnvToFrOrganizations();
    }


    $("#kt_activation_keys").parents("form").submit(ktOnSubmit);

    ktOnLoad();

    $("#kt_activation_keys").autocomplete({
        minLength: 0,
        source: function(request, response) {
            var terms = request.term.split(/,\s*/);
            var part = terms.pop();
            var items = []
            for(key in availableActivationKeys) {
                if(terms.indexOf(key) == -1) {
                    items.push(key);
                }
            }
            response($.ui.autocomplete.filter(
                items, part));
        },

        focus: function() {
            // prevent value inserted on focus
            return false;
        },
        select: function(event, ui) {
            var oldTerms = this.value.replace(/[^, ][^,]*$/,"");
            this.value = oldTerms + ui.item.value;
            ktAkUpdateSubscriptionsInfo();
            return false;
        },
        close: function() {
            ktAkUpdateSubscriptionsInfo();
        }

    }).bind("focus", function(event) {
        if($(this)[0].value == "") {
	    $(this).autocomplete( "search" );
        }});

    $("#hostgroup_environment_id").change(ktLoadActivationKeys);

    $("#ak_refresh_subscriptions").click(function () {
        ktLoadActivationKeys();
        return false;
    });

});

<% end %>

<div class="tab-pane" id="activation_keys">
  <%= field(f, _("Activation Keys"),
            :help_inline => _("comma separated values. The value will be available in templates as @host.params['#{kt_ak_label}']")) do
    text_field_tag("kt_activation_keys", "", :style => 'width: 98%')
  end %>

  <div class="alert alert-info">
    <p><b><%= _('Subscriptions information based on selected activation keys:') %></b></p>
    <ul id="ak-subscriptions-info"></ul>

    <div id="ak-subscriptions-spinner" style="display: none">
      <%= image_tag "spinner.gif" %>
    </div>

    <p><%= _('Activation keys and subscriptions can be managed') %>
      <b><a href="/katello/activation_keys#/activation-keys" target="_blank"> <%= _('here') %></a></b>
    </p>
    <p><%= subscription_manager_configuration_url %></p>
    <p><a href="" id="ak_refresh_subscriptions"><%= _('Reload data') %></a></p>
  </div>
</div>
