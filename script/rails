#!/usr/bin/env ruby
# This command will automatically be run when you run "rails" with Rails 3 gems installed from the root of your application.

require 'rubygems'
require 'rails/commands/server'
require 'rails/all'
require 'rack'
require 'webrick'
require 'webrick/https'
require 'yaml'

#
# this is to enable ssl and ssl cert-based client authentication
#  use common -> use_ssl in /etc/satellite/satellite.yml to enable ssl
#  if you are running candlepin on a separate host:
#    make sure to copy candlepin certificates from /etc/candlepin/certs into the same local directory
#
config = YAML.load_file('/etc/katello/katello.yml') rescue nil
if config and config['common']['use_ssl']
  module Rails
      class Server < ::Rack::Server
          def default_options
              super.merge({
                  :Port => 3000,
                  :environment => (ENV['RAILS_ENV'] || "development").dup,
                  :daemonize => false,
                  :debugger => false,
                  :pid => File.expand_path("tmp/pids/server.pid"),
                  :config => File.expand_path("config.ru"),
                  :SSLEnable => true,
                  :SSLVerifyClient => ::OpenSSL::SSL::VERIFY_PEER,
                  :SSLVerifyDepth  => 2,
                  :SSLCACertificateFile => "/etc/candlepin/certs/candlepin-ca.crt",
                  :SSLPrivateKey => OpenSSL::PKey::RSA.new(File.open("/etc/candlepin/certs/candlepin-ca.key").read),
                  :SSLCertificate => OpenSSL::X509::Certificate.new(File.open("/etc/candlepin/certs/candlepin-ca.crt").read),
                  :SSLCertName => [["CN", WEBrick::Utils::getservername]]
              })
          end
      end
  end
end



#Subsystem check
# We add the check after initialization, because Rspec runs its initail rails init in development mode
# but this file is not run as part of rspec
module Src
  class Application < Rails::Application
    config.after_initialize do

      require 'resources/candlepin'
      subsystems_file = "#{Rails.root}/config/subsystems.yml"
      raise _("Unable to find config/subsystems.yml") unless File.exists? subsystems_file
      subsystems = YAML::load_file(subsystems_file) || {}

      begin
        required_version =  subsystems["candlepin"]
        raise _("No version of candlepin specified") if required_version.nil?
        cp_ping = Candlepin::CandlepinPing.ping
        actual_version = "#{cp_ping[:version]}-#{cp_ping[:release]}"
        actual_version.gsub!('%{?dist}','') #remove %{?dist}
        raise _("Incorrect version , Expected #{required_version}, got #{actual_version}") if  actual_version != required_version
      rescue Exception => e
        #print to console and the logs, extra newlines make it stand out
        2.times do
          78.times { print '*' }; puts '*'
        end
        puts Rails.logger.error _("\nError verifying candlepin: #{e.message}\n\n")
        puts "To suppress this message, edit subsystems.yml config file."
        2.times do
          78.times { print '*' }; puts '*'
        end
      end
    end
  end
end

APP_PATH = File.expand_path('../../config/application',  __FILE__)
require File.expand_path('../../config/boot',  __FILE__)
require 'rails/commands'
