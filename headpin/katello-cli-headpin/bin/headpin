#!/usr/bin/python
#
# Katello Shell
# Copyright (c) 2012 Red Hat, Inc.
#
# This software is licensed to you under the GNU General Public License,
# version 2 (GPLv2). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
# along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
#
# Red Hat trademarks are not licensed under GPLv2. No permission is
# granted to use or replicate Red Hat trademarks that are incorporated
# in this software or its documentation.
#

import sys
import os
from pwd import getpwuid

# Set up the new locations for the config files
from katello.client.config import Config
Config.FILE = 'client.conf'
Config.PATH = os.path.join('/etc/katello', Config.FILE)
Config.USER_DIR = os.path.join(getpwuid(os.getuid())[5], '.headpin')
Config.USER = os.path.expanduser(os.path.join(Config.USER_DIR, Config.FILE))
Config.USER_OPTIONS = os.path.expanduser(os.path.join(Config.USER_DIR, 'client-options.conf'))

from katello.client.cli.admin import AdminCLI
from katello.client.shell import KatelloShell
from katello.client.core import (
  activation_key,
  environment,
  organization,
  user,
  user_role,
  permission,
  provider,
  product,
  ping,
  version,
  system,
  shell_command,
  client
)

def setup_admin(admin):
    akey_cmd = activation_key.ActivationKey()
    akey_cmd.add_command('create', activation_key.Create())
    akey_cmd.add_command('info', activation_key.Info())
    akey_cmd.add_command('list', activation_key.List())
    akey_cmd.add_command('update', activation_key.Update())
    akey_cmd.add_command('delete', activation_key.Delete())
    admin.add_command('activation_key', akey_cmd)

    env_cmd = environment.Environment()
    env_cmd.add_command('create', environment.Create())
    env_cmd.add_command('info', environment.Info())
    env_cmd.add_command('list', environment.List())
    env_cmd.add_command('update', environment.Update())
    env_cmd.add_command('delete', environment.Delete())
    admin.add_command('environment', env_cmd)

    org_cmd = organization.Organization()
    org_cmd.add_command('create', organization.Create())
    org_cmd.add_command('info', organization.Info())
    org_cmd.add_command('list', organization.List())
    org_cmd.add_command('update', organization.Update())
    org_cmd.add_command('delete', organization.Delete())
    org_cmd.add_command('subscriptions', organization.ShowSubscriptions())
    admin.add_command('org', org_cmd)

    user_cmd = user.User()
    user_cmd.add_command('create', user.Create())
    user_cmd.add_command('info', user.Info())
    user_cmd.add_command('list', user.List())
    user_cmd.add_command('update', user.Update())
    user_cmd.add_command('delete', user.Delete())
    user_cmd.add_command('report', user.Report())
    user_cmd.add_command('assign_role', user.AssignRole(True))
    user_cmd.add_command('unassign_role', user.AssignRole(False))
    user_cmd.add_command('list_roles', user.ListRoles())
    user_cmd.add_command('sync_ldap_roles', user.SyncLdapRoles())
    admin.add_command('user', user_cmd)

    user_role_cmd = user_role.UserRole()
    user_role_cmd.add_command('create', user_role.Create())
    user_role_cmd.add_command('info', user_role.Info())
    user_role_cmd.add_command('list', user_role.List())
    user_role_cmd.add_command('update', user_role.Update())
    user_role_cmd.add_command('add_ldap_group', user_role.AddLdapGroup())
    user_role_cmd.add_command('remove_ldap_group', user_role.RemoveLdapGroup())
    user_role_cmd.add_command('delete', user_role.Delete())
    admin.add_command('user_role', user_role_cmd)

    permission_cmd = permission.Permission()
    permission_cmd.add_command('create', permission.Create())
    permission_cmd.add_command('list', permission.List())
    permission_cmd.add_command('delete', permission.Delete())
    permission_cmd.add_command('available_verbs', permission.ListAvailableVerbs())
    admin.add_command('permission', permission_cmd)

    admin.add_command('ping', ping.Status())
    admin.add_command('version', version.Info())
    prod_cmd = product.Product()
    prod_cmd.add_command('list', product.List())
    admin.add_command('product', prod_cmd)

    system_cmd = system.System()
    system_cmd.add_command('list', system.List())
    system_cmd.add_command('unregister', system.Unregister())
    system_cmd.add_command('subscriptions', system.Subscriptions())
    system_cmd.add_command('subscribe', system.Subscribe())
    system_cmd.add_command('unsubscribe', system.Unsubscribe())
    system_cmd.add_command('info', system.Info())
    system_cmd.add_command('facts', system.Facts())
    system_cmd.add_command('update', system.Update())
    system_cmd.add_command('report', system.Report())
    system_cmd.add_command('releases', system.Releases())
    system_cmd.add_command('remove_deletion', system.RemoveDeletion())
    admin.add_command('system', system_cmd)

    admin.add_command('shell', shell_command.ShellAction(admin))

    prov_cmd = provider.Provider()
    prov_cmd.add_command('info', provider.Info())
    prov_cmd.add_command('list', provider.List())
    prov_cmd.add_command('import_manifest', provider.ImportManifest())
    admin.add_command('provider', prov_cmd)


    client_cmd = client.Client()
    client_cmd.add_command('remember', client.Remember())
    client_cmd.add_command('forget', client.Forget())
    client_cmd.add_command('saved_options', client.SavedOptions())
    admin.add_command('client', client_cmd)

if __name__ == "__main__":
    admin = AdminCLI()
    setup_admin(admin)
    command_name = os.path.basename(sys.argv[0])
    sys.exit(admin.main(sys.argv[1:], command_name))

