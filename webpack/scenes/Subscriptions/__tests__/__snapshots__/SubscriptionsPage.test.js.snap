// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`subscriptions page renders SubscriptionsPage 1`] = `
<Grid
  bsClass="container-fluid"
  componentClass="div"
  fluid={false}
>
  <Row
    bsClass="row"
    componentClass="div"
  >
    <Col
      bsClass="col"
      componentClass="div"
      sm={12}
    >
      <h1>
        Red Hat Subscriptions
      </h1>
      <SubscriptionsToolbar
        addButtonDisabled={false}
        deleteButtonDisabled={false}
        deleteButtonDisabledReason=""
        getAutoCompleteParams={[Function]}
        manifestActionsDisabled={false}
        manifestActionsDisabledReason=""
        onDeleteButtonClick={[MockFunction]}
        onExportCsvButtonClick={[MockFunction]}
        onManageManifestButtonClick={[MockFunction]}
        onSearch={[Function]}
        updateSearchQuery={[MockFunction]}
      />
      <Connect(ManageManifestModal)
        disableManifestActions={false}
        disabledReason=""
        onClose={[MockFunction]}
        showModal={false}
        taskInProgress={false}
      />
      <div
        className="modal-container"
        id="subscriptions-table"
      >
        <SubscriptionsTable
          deleteModalOpened={false}
          emptyState={
            Object {
              "action": Object {
                "onClick": [Function],
                "title": "Import a Manifest",
              },
              "description": "Import a Manifest to manage your Entitlements.",
              "header": "There are no Subscriptions to display",
            }
          }
          loadSubscriptions={
            [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            }
          }
          onDeleteSubscriptions={[Function]}
          onSubscriptionDeleteModalClose={[MockFunction]}
          runMonitorManifestTasksManually={[MockFunction]}
          subscriptions={
            Object {
              "availableQuantities": null,
              "itemCount": 81,
              "loading": false,
              "pagination": Object {
                "page": 1,
                "perPage": 2,
              },
              "quantitiesLoading": false,
              "results": Array [
                Object {
                  "account_number": null,
                  "available": -2,
                  "consumed": 1,
                  "contract_number": null,
                  "cores": null,
                  "cp_id": "ff8080815ea5ea44015ea617b1a5000b",
                  "end_date": "2047-09-14 15:18:44 -0500",
                  "id": 3,
                  "instance_multiplier": 1,
                  "multi_entitlement": null,
                  "name": "zoo",
                  "product_id": "853987721546",
                  "product_name": "zoo",
                  "quantity": -1,
                  "ram": null,
                  "sockets": null,
                  "stacking_id": null,
                  "start_date": "2017-09-21 16:18:44 -0400",
                  "subscription_id": 2,
                  "support_level": null,
                  "type": "NORMAL",
                  "unmapped_guest": false,
                  "virt_only": false,
                  "virt_who": false,
                },
                Object {
                  "account_number": null,
                  "available": -1,
                  "consumed": 0,
                  "contract_number": null,
                  "cores": null,
                  "cp_id": "ff8080815ea5ea44015ebb08e95a0024",
                  "end_date": "2047-09-18 16:54:36 -0500",
                  "id": 4,
                  "instance_multiplier": 1,
                  "multi_entitlement": null,
                  "name": "hsdfhsdh",
                  "product_id": "947637693017",
                  "product_name": "hsdfhsdh",
                  "quantity": -1,
                  "ram": null,
                  "sockets": null,
                  "stacking_id": null,
                  "start_date": "2017-09-25 17:54:36 -0400",
                  "subscription_id": 3,
                  "support_level": null,
                  "type": "NORMAL",
                  "unmapped_guest": false,
                  "virt_only": false,
                  "virt_who": false,
                },
              ],
              "search": undefined,
              "searchIsActive": false,
              "tasks": Array [],
            }
          }
          task={null}
          toggleDeleteButton={[Function]}
          updateQuantity={[MockFunction]}
        />
        <ModalProgressBar
          container={null}
          show={false}
          task={null}
        />
      </div>
    </Col>
  </Row>
</Grid>
`;

exports[`subscriptions page renders SubscriptionsPage with delete button disabled 1`] = `
<Grid
  bsClass="container-fluid"
  componentClass="div"
  fluid={false}
>
  <Row
    bsClass="row"
    componentClass="div"
  >
    <Col
      bsClass="col"
      componentClass="div"
      sm={12}
    >
      <h1>
        Red Hat Subscriptions
      </h1>
      <SubscriptionsToolbar
        addButtonDisabled={false}
        deleteButtonDisabled={true}
        deleteButtonDisabledReason="some reason"
        getAutoCompleteParams={[Function]}
        manifestActionsDisabled={false}
        manifestActionsDisabledReason=""
        onDeleteButtonClick={[MockFunction]}
        onExportCsvButtonClick={[MockFunction]}
        onManageManifestButtonClick={[MockFunction]}
        onSearch={[Function]}
        updateSearchQuery={[MockFunction]}
      />
      <Connect(ManageManifestModal)
        disableManifestActions={false}
        disabledReason=""
        onClose={[MockFunction]}
        showModal={false}
        taskInProgress={false}
      />
      <div
        className="modal-container"
        id="subscriptions-table"
      >
        <SubscriptionsTable
          deleteModalOpened={false}
          emptyState={
            Object {
              "action": Object {
                "onClick": [Function],
                "title": "Import a Manifest",
              },
              "description": "Import a Manifest to manage your Entitlements.",
              "header": "There are no Subscriptions to display",
            }
          }
          loadSubscriptions={
            [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            }
          }
          onDeleteSubscriptions={[Function]}
          onSubscriptionDeleteModalClose={[MockFunction]}
          runMonitorManifestTasksManually={[MockFunction]}
          subscriptions={
            Object {
              "availableQuantities": null,
              "itemCount": 81,
              "loading": false,
              "pagination": Object {
                "page": 1,
                "perPage": 2,
              },
              "quantitiesLoading": false,
              "results": Array [
                Object {
                  "account_number": null,
                  "available": -2,
                  "consumed": 1,
                  "contract_number": null,
                  "cores": null,
                  "cp_id": "ff8080815ea5ea44015ea617b1a5000b",
                  "end_date": "2047-09-14 15:18:44 -0500",
                  "id": 3,
                  "instance_multiplier": 1,
                  "multi_entitlement": null,
                  "name": "zoo",
                  "product_id": "853987721546",
                  "product_name": "zoo",
                  "quantity": -1,
                  "ram": null,
                  "sockets": null,
                  "stacking_id": null,
                  "start_date": "2017-09-21 16:18:44 -0400",
                  "subscription_id": 2,
                  "support_level": null,
                  "type": "NORMAL",
                  "unmapped_guest": false,
                  "virt_only": false,
                  "virt_who": false,
                },
                Object {
                  "account_number": null,
                  "available": -1,
                  "consumed": 0,
                  "contract_number": null,
                  "cores": null,
                  "cp_id": "ff8080815ea5ea44015ebb08e95a0024",
                  "end_date": "2047-09-18 16:54:36 -0500",
                  "id": 4,
                  "instance_multiplier": 1,
                  "multi_entitlement": null,
                  "name": "hsdfhsdh",
                  "product_id": "947637693017",
                  "product_name": "hsdfhsdh",
                  "quantity": -1,
                  "ram": null,
                  "sockets": null,
                  "stacking_id": null,
                  "start_date": "2017-09-25 17:54:36 -0400",
                  "subscription_id": 3,
                  "support_level": null,
                  "type": "NORMAL",
                  "unmapped_guest": false,
                  "virt_only": false,
                  "virt_who": false,
                },
              ],
              "search": undefined,
              "searchIsActive": false,
              "tasks": Array [],
            }
          }
          task={null}
          toggleDeleteButton={[Function]}
          updateQuantity={[MockFunction]}
        />
        <ModalProgressBar
          container={null}
          show={false}
          task={null}
        />
      </div>
    </Col>
  </Row>
</Grid>
`;

exports[`subscriptions page renders SubscriptionsPage with delete modal opened 1`] = `
<Grid
  bsClass="container-fluid"
  componentClass="div"
  fluid={false}
>
  <Row
    bsClass="row"
    componentClass="div"
  >
    <Col
      bsClass="col"
      componentClass="div"
      sm={12}
    >
      <h1>
        Red Hat Subscriptions
      </h1>
      <SubscriptionsToolbar
        addButtonDisabled={false}
        deleteButtonDisabled={false}
        deleteButtonDisabledReason=""
        getAutoCompleteParams={[Function]}
        manifestActionsDisabled={false}
        manifestActionsDisabledReason=""
        onDeleteButtonClick={[MockFunction]}
        onExportCsvButtonClick={[MockFunction]}
        onManageManifestButtonClick={[MockFunction]}
        onSearch={[Function]}
        updateSearchQuery={[MockFunction]}
      />
      <Connect(ManageManifestModal)
        disableManifestActions={false}
        disabledReason=""
        onClose={[MockFunction]}
        showModal={false}
        taskInProgress={false}
      />
      <div
        className="modal-container"
        id="subscriptions-table"
      >
        <SubscriptionsTable
          deleteModalOpened={true}
          emptyState={
            Object {
              "action": Object {
                "onClick": [Function],
                "title": "Import a Manifest",
              },
              "description": "Import a Manifest to manage your Entitlements.",
              "header": "There are no Subscriptions to display",
            }
          }
          loadSubscriptions={
            [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            }
          }
          onDeleteSubscriptions={[Function]}
          onSubscriptionDeleteModalClose={[MockFunction]}
          runMonitorManifestTasksManually={[MockFunction]}
          subscriptions={
            Object {
              "availableQuantities": null,
              "itemCount": 81,
              "loading": false,
              "pagination": Object {
                "page": 1,
                "perPage": 2,
              },
              "quantitiesLoading": false,
              "results": Array [
                Object {
                  "account_number": null,
                  "available": -2,
                  "consumed": 1,
                  "contract_number": null,
                  "cores": null,
                  "cp_id": "ff8080815ea5ea44015ea617b1a5000b",
                  "end_date": "2047-09-14 15:18:44 -0500",
                  "id": 3,
                  "instance_multiplier": 1,
                  "multi_entitlement": null,
                  "name": "zoo",
                  "product_id": "853987721546",
                  "product_name": "zoo",
                  "quantity": -1,
                  "ram": null,
                  "sockets": null,
                  "stacking_id": null,
                  "start_date": "2017-09-21 16:18:44 -0400",
                  "subscription_id": 2,
                  "support_level": null,
                  "type": "NORMAL",
                  "unmapped_guest": false,
                  "virt_only": false,
                  "virt_who": false,
                },
                Object {
                  "account_number": null,
                  "available": -1,
                  "consumed": 0,
                  "contract_number": null,
                  "cores": null,
                  "cp_id": "ff8080815ea5ea44015ebb08e95a0024",
                  "end_date": "2047-09-18 16:54:36 -0500",
                  "id": 4,
                  "instance_multiplier": 1,
                  "multi_entitlement": null,
                  "name": "hsdfhsdh",
                  "product_id": "947637693017",
                  "product_name": "hsdfhsdh",
                  "quantity": -1,
                  "ram": null,
                  "sockets": null,
                  "stacking_id": null,
                  "start_date": "2017-09-25 17:54:36 -0400",
                  "subscription_id": 3,
                  "support_level": null,
                  "type": "NORMAL",
                  "unmapped_guest": false,
                  "virt_only": false,
                  "virt_who": false,
                },
              ],
              "search": undefined,
              "searchIsActive": false,
              "tasks": Array [],
            }
          }
          task={null}
          toggleDeleteButton={[Function]}
          updateQuantity={[MockFunction]}
        />
        <ModalProgressBar
          container={null}
          show={false}
          task={null}
        />
      </div>
    </Col>
  </Row>
</Grid>
`;

exports[`subscriptions page renders SubscriptionsPage with manifest actions disabled 1`] = `
<Grid
  bsClass="container-fluid"
  componentClass="div"
  fluid={false}
>
  <Row
    bsClass="row"
    componentClass="div"
  >
    <Col
      bsClass="col"
      componentClass="div"
      sm={12}
    >
      <h1>
        Red Hat Subscriptions
      </h1>
      <SubscriptionsToolbar
        addButtonDisabled={true}
        deleteButtonDisabled={true}
        deleteButtonDisabledReason=""
        getAutoCompleteParams={[Function]}
        manifestActionsDisabled={true}
        manifestActionsDisabledReason="some reason"
        onDeleteButtonClick={[MockFunction]}
        onExportCsvButtonClick={[MockFunction]}
        onManageManifestButtonClick={[MockFunction]}
        onSearch={[Function]}
        updateSearchQuery={[MockFunction]}
      />
      <Connect(ManageManifestModal)
        disableManifestActions={true}
        disabledReason="some reason"
        onClose={[MockFunction]}
        showModal={false}
        taskInProgress={false}
      />
      <div
        className="modal-container"
        id="subscriptions-table"
      >
        <SubscriptionsTable
          deleteModalOpened={false}
          emptyState={
            Object {
              "action": Object {
                "onClick": [Function],
                "title": "Import a Manifest",
              },
              "description": "Import a Manifest to manage your Entitlements.",
              "header": "There are no Subscriptions to display",
            }
          }
          loadSubscriptions={
            [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            }
          }
          onDeleteSubscriptions={[Function]}
          onSubscriptionDeleteModalClose={[MockFunction]}
          runMonitorManifestTasksManually={[MockFunction]}
          subscriptions={
            Object {
              "availableQuantities": null,
              "itemCount": 81,
              "loading": false,
              "pagination": Object {
                "page": 1,
                "perPage": 2,
              },
              "quantitiesLoading": false,
              "results": Array [
                Object {
                  "account_number": null,
                  "available": -2,
                  "consumed": 1,
                  "contract_number": null,
                  "cores": null,
                  "cp_id": "ff8080815ea5ea44015ea617b1a5000b",
                  "end_date": "2047-09-14 15:18:44 -0500",
                  "id": 3,
                  "instance_multiplier": 1,
                  "multi_entitlement": null,
                  "name": "zoo",
                  "product_id": "853987721546",
                  "product_name": "zoo",
                  "quantity": -1,
                  "ram": null,
                  "sockets": null,
                  "stacking_id": null,
                  "start_date": "2017-09-21 16:18:44 -0400",
                  "subscription_id": 2,
                  "support_level": null,
                  "type": "NORMAL",
                  "unmapped_guest": false,
                  "virt_only": false,
                  "virt_who": false,
                },
                Object {
                  "account_number": null,
                  "available": -1,
                  "consumed": 0,
                  "contract_number": null,
                  "cores": null,
                  "cp_id": "ff8080815ea5ea44015ebb08e95a0024",
                  "end_date": "2047-09-18 16:54:36 -0500",
                  "id": 4,
                  "instance_multiplier": 1,
                  "multi_entitlement": null,
                  "name": "hsdfhsdh",
                  "product_id": "947637693017",
                  "product_name": "hsdfhsdh",
                  "quantity": -1,
                  "ram": null,
                  "sockets": null,
                  "stacking_id": null,
                  "start_date": "2017-09-25 17:54:36 -0400",
                  "subscription_id": 3,
                  "support_level": null,
                  "type": "NORMAL",
                  "unmapped_guest": false,
                  "virt_only": false,
                  "virt_who": false,
                },
              ],
              "search": undefined,
              "searchIsActive": false,
              "tasks": Array [],
            }
          }
          task={null}
          toggleDeleteButton={[Function]}
          updateQuantity={[MockFunction]}
        />
        <ModalProgressBar
          container={null}
          show={false}
          task={null}
        />
      </div>
    </Col>
  </Row>
</Grid>
`;

exports[`subscriptions page renders SubscriptionsPage with manifest modal opened 1`] = `
<Grid
  bsClass="container-fluid"
  componentClass="div"
  fluid={false}
>
  <Row
    bsClass="row"
    componentClass="div"
  >
    <Col
      bsClass="col"
      componentClass="div"
      sm={12}
    >
      <h1>
        Red Hat Subscriptions
      </h1>
      <SubscriptionsToolbar
        addButtonDisabled={false}
        deleteButtonDisabled={false}
        deleteButtonDisabledReason=""
        getAutoCompleteParams={[Function]}
        manifestActionsDisabled={false}
        manifestActionsDisabledReason=""
        onDeleteButtonClick={[MockFunction]}
        onExportCsvButtonClick={[MockFunction]}
        onManageManifestButtonClick={[MockFunction]}
        onSearch={[Function]}
        updateSearchQuery={[MockFunction]}
      />
      <Connect(ManageManifestModal)
        disableManifestActions={false}
        disabledReason=""
        onClose={[MockFunction]}
        showModal={true}
        taskInProgress={false}
      />
      <div
        className="modal-container"
        id="subscriptions-table"
      >
        <SubscriptionsTable
          deleteModalOpened={false}
          emptyState={
            Object {
              "action": Object {
                "onClick": [Function],
                "title": "Import a Manifest",
              },
              "description": "Import a Manifest to manage your Entitlements.",
              "header": "There are no Subscriptions to display",
            }
          }
          loadSubscriptions={
            [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            }
          }
          onDeleteSubscriptions={[Function]}
          onSubscriptionDeleteModalClose={[MockFunction]}
          runMonitorManifestTasksManually={[MockFunction]}
          subscriptions={
            Object {
              "availableQuantities": null,
              "itemCount": 81,
              "loading": false,
              "pagination": Object {
                "page": 1,
                "perPage": 2,
              },
              "quantitiesLoading": false,
              "results": Array [
                Object {
                  "account_number": null,
                  "available": -2,
                  "consumed": 1,
                  "contract_number": null,
                  "cores": null,
                  "cp_id": "ff8080815ea5ea44015ea617b1a5000b",
                  "end_date": "2047-09-14 15:18:44 -0500",
                  "id": 3,
                  "instance_multiplier": 1,
                  "multi_entitlement": null,
                  "name": "zoo",
                  "product_id": "853987721546",
                  "product_name": "zoo",
                  "quantity": -1,
                  "ram": null,
                  "sockets": null,
                  "stacking_id": null,
                  "start_date": "2017-09-21 16:18:44 -0400",
                  "subscription_id": 2,
                  "support_level": null,
                  "type": "NORMAL",
                  "unmapped_guest": false,
                  "virt_only": false,
                  "virt_who": false,
                },
                Object {
                  "account_number": null,
                  "available": -1,
                  "consumed": 0,
                  "contract_number": null,
                  "cores": null,
                  "cp_id": "ff8080815ea5ea44015ebb08e95a0024",
                  "end_date": "2047-09-18 16:54:36 -0500",
                  "id": 4,
                  "instance_multiplier": 1,
                  "multi_entitlement": null,
                  "name": "hsdfhsdh",
                  "product_id": "947637693017",
                  "product_name": "hsdfhsdh",
                  "quantity": -1,
                  "ram": null,
                  "sockets": null,
                  "stacking_id": null,
                  "start_date": "2017-09-25 17:54:36 -0400",
                  "subscription_id": 3,
                  "support_level": null,
                  "type": "NORMAL",
                  "unmapped_guest": false,
                  "virt_only": false,
                  "virt_who": false,
                },
              ],
              "search": undefined,
              "searchIsActive": false,
              "tasks": Array [],
            }
          }
          task={null}
          toggleDeleteButton={[Function]}
          updateQuantity={[MockFunction]}
        />
        <ModalProgressBar
          container={null}
          show={false}
          task={null}
        />
      </div>
    </Col>
  </Row>
</Grid>
`;

exports[`subscriptions page renders SubscriptionsPage with task in progress 1`] = `
<Grid
  bsClass="container-fluid"
  componentClass="div"
  fluid={false}
>
  <Row
    bsClass="row"
    componentClass="div"
  >
    <Col
      bsClass="col"
      componentClass="div"
      sm={12}
    >
      <h1>
        Red Hat Subscriptions
      </h1>
      <SubscriptionsToolbar
        addButtonDisabled={false}
        deleteButtonDisabled={false}
        deleteButtonDisabledReason=""
        getAutoCompleteParams={[Function]}
        manifestActionsDisabled={false}
        manifestActionsDisabledReason=""
        onDeleteButtonClick={[MockFunction]}
        onExportCsvButtonClick={[MockFunction]}
        onManageManifestButtonClick={[MockFunction]}
        onSearch={[Function]}
        updateSearchQuery={[MockFunction]}
      />
      <Connect(ManageManifestModal)
        disableManifestActions={false}
        disabledReason=""
        onClose={[MockFunction]}
        showModal={false}
        taskInProgress={true}
      />
      <div
        className="modal-container"
        id="subscriptions-table"
      >
        <SubscriptionsTable
          deleteModalOpened={false}
          emptyState={
            Object {
              "action": Object {
                "onClick": [Function],
                "title": "Import a Manifest",
              },
              "description": "Import a Manifest to manage your Entitlements.",
              "header": "There are no Subscriptions to display",
            }
          }
          loadSubscriptions={
            [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            }
          }
          onDeleteSubscriptions={[Function]}
          onSubscriptionDeleteModalClose={[MockFunction]}
          runMonitorManifestTasksManually={[MockFunction]}
          subscriptions={
            Object {
              "availableQuantities": null,
              "itemCount": 81,
              "loading": false,
              "pagination": Object {
                "page": 1,
                "perPage": 2,
              },
              "quantitiesLoading": false,
              "results": Array [
                Object {
                  "account_number": null,
                  "available": -2,
                  "consumed": 1,
                  "contract_number": null,
                  "cores": null,
                  "cp_id": "ff8080815ea5ea44015ea617b1a5000b",
                  "end_date": "2047-09-14 15:18:44 -0500",
                  "id": 3,
                  "instance_multiplier": 1,
                  "multi_entitlement": null,
                  "name": "zoo",
                  "product_id": "853987721546",
                  "product_name": "zoo",
                  "quantity": -1,
                  "ram": null,
                  "sockets": null,
                  "stacking_id": null,
                  "start_date": "2017-09-21 16:18:44 -0400",
                  "subscription_id": 2,
                  "support_level": null,
                  "type": "NORMAL",
                  "unmapped_guest": false,
                  "virt_only": false,
                  "virt_who": false,
                },
                Object {
                  "account_number": null,
                  "available": -1,
                  "consumed": 0,
                  "contract_number": null,
                  "cores": null,
                  "cp_id": "ff8080815ea5ea44015ebb08e95a0024",
                  "end_date": "2047-09-18 16:54:36 -0500",
                  "id": 4,
                  "instance_multiplier": 1,
                  "multi_entitlement": null,
                  "name": "hsdfhsdh",
                  "product_id": "947637693017",
                  "product_name": "hsdfhsdh",
                  "quantity": -1,
                  "ram": null,
                  "sockets": null,
                  "stacking_id": null,
                  "start_date": "2017-09-25 17:54:36 -0400",
                  "subscription_id": 3,
                  "support_level": null,
                  "type": "NORMAL",
                  "unmapped_guest": false,
                  "virt_only": false,
                  "virt_who": false,
                },
              ],
              "search": undefined,
              "searchIsActive": false,
              "tasks": Array [],
            }
          }
          task={
            Object {
              "humanized": Object {
                "action": "some-action",
              },
              "id": "some-id",
              "progress": 0.09,
              "result": "some-results",
            }
          }
          toggleDeleteButton={[Function]}
          updateQuantity={[MockFunction]}
        />
        <ModalProgressBar
          container={null}
          show={true}
          task={
            Object {
              "humanized": Object {
                "action": "some-action",
              },
              "id": "some-id",
              "progress": 0.09,
              "result": "some-results",
            }
          }
        />
      </div>
    </Col>
  </Row>
</Grid>
`;
