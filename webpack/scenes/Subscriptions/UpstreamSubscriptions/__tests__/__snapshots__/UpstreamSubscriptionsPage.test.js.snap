// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`upstream subscriptions page should render 1`] = `
<Grid
  bsClass="container-fluid"
  componentClass="div"
  fluid={false}
>
  <BreadcrumbsBar
    data={
      Object {
        "breadcrumbItems": Array [
          Object {
            "caption": "Subscriptions",
            "onClick": [Function],
          },
          Object {
            "caption": "Add Subscriptions",
          },
        ],
        "isSwitchable": false,
      }
    }
  />
  <LoadingState
    loading={false}
    loadingText="Loading"
    timeout={300}
  >
    <Row
      bsClass="row"
      componentClass="div"
    >
      <Col
        bsClass="col"
        componentClass="div"
        sm={12}
      >
        <Table
          columns={
            Array [
              Object {
                "cell": Object {
                  "formatters": Array [
                    [Function],
                  ],
                },
                "header": Object {
                  "formatters": Array [
                    [Function],
                  ],
                  "label": "Subscription Name",
                },
                "property": "id",
              },
              Object {
                "cell": Object {
                  "formatters": Array [
                    [Function],
                  ],
                },
                "header": Object {
                  "formatters": Array [
                    [Function],
                  ],
                  "label": "Contract",
                },
                "property": "contract_number",
              },
              Object {
                "cell": Object {
                  "formatters": Array [
                    [Function],
                  ],
                },
                "header": Object {
                  "formatters": Array [
                    [Function],
                  ],
                  "label": "Start Date",
                },
                "property": "start_date",
              },
              Object {
                "cell": Object {
                  "formatters": Array [
                    [Function],
                  ],
                },
                "header": Object {
                  "formatters": Array [
                    [Function],
                  ],
                  "label": "End Date",
                },
                "property": "end_date",
              },
              Object {
                "cell": Object {
                  "formatters": Array [
                    [Function],
                  ],
                },
                "header": Object {
                  "formatters": Array [
                    [Function],
                  ],
                  "label": "Available Entitlements",
                },
                "property": "available",
              },
              Object {
                "cell": Object {
                  "formatters": Array [
                    [Function],
                  ],
                },
                "header": Object {
                  "formatters": Array [
                    [Function],
                  ],
                  "label": "Quantity to Allocate",
                },
                "property": "consumed",
              },
            ]
          }
          emptyState={
            Object {
              "action": Object {
                "title": "Import a Manifest to Begin",
                "url": "/subscriptions",
              },
              "description": "Subscription Allocations allow you to export subscriptions from the Red Hat Customer Portal to an on-premise subscription management application such as Red Hat Satellite.",
              "header": "There are no Subscription Allocations to display",
            }
          }
          itemCount={2}
          onPaginationChange={[Function]}
          pagination={
            Object {
              "page": 1,
              "perPage": 20,
            }
          }
          rows={
            Array [
              Object {
                "consumed": 100,
                "contract_number": "11480900",
                "end_date": "2018-09-15T03:59:59+0000",
                "id": "8a99f9815e718933015e85b19e1e11d7",
                "product_id": "RH00284",
                "product_name": "Red Hat Enterprise Linux for Power, LE, Premium (IFL, up to 4 LPARs)",
                "quantity": 200,
                "selected": false,
                "start_date": "2017-09-15T04:00:00+0000",
                "subscription_id": "4753270",
              },
              Object {
                "consumed": 125,
                "contract_number": "11480898",
                "end_date": "2018-09-15T03:59:59+0000",
                "id": "8a99f9815e718933015e85b1bfd211db",
                "product_id": "RH00447",
                "product_name": "Red Hat Enterprise Linux Server for ATOM with Smart Management, Hyperscale, Standard (5 Physical Nodes)",
                "quantity": 250,
                "selected": false,
                "start_date": "2017-09-15T04:00:00+0000",
                "subscription_id": "4753271",
              },
            ]
          }
        />
      </Col>
    </Row>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <Col
        bsClass="col"
        componentClass="div"
        sm={12}
      >
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsStyle="primary"
          disabled={true}
          onClick={[Function]}
          style={
            Object {
              "marginRight": "5px",
              "marginTop": "10px",
            }
          }
          type="submit"
        >
          Submit
        </Button>
        <withRouter(LinkContainer)
          style={
            Object {
              "marginTop": "10px",
            }
          }
          to="/subscriptions"
        >
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="default"
            disabled={false}
          >
            Cancel
          </Button>
        </withRouter(LinkContainer)>
      </Col>
    </Row>
  </LoadingState>
</Grid>
`;
