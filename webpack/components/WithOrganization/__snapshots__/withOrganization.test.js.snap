// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`subscriptions page should render select org page 1`] = `
<Connect(CheckOrg)
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <CheckOrg
    default={[Function]}
    loadOrganization={[Function]}
    organization={Object {}}
    saveOrganization={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
  >
    <Header
      title="Select Organization"
    >
      <HelmetWrapper
        defer={true}
        encodeSpecialCharacters={true}
      >
        <SideEffect(NullComponent)
          defer={true}
          encodeSpecialCharacters={true}
          title="Select Organization"
          titleAttributes={Object {}}
        >
          <NullComponent
            defer={true}
            encodeSpecialCharacters={true}
            title="Select Organization"
            titleAttributes={Object {}}
          />
        </SideEffect(NullComponent)>
      </HelmetWrapper>
    </Header>
    <Connect(withRouter(SetOrganization)) />
  </CheckOrg>
</Connect(CheckOrg)>
`;

exports[`subscriptions page should render the wrapped component 1`] = `
<Connect(CheckOrg)
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <CheckOrg
    default={[Function]}
    loadOrganization={[Function]}
    organization={Object {}}
    saveOrganization={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
  >
    <WrappedComponent
      default={[Function]}
      loadOrganization={[Function]}
      organization={Object {}}
      saveOrganization={[Function]}
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <div>
         Wrapped! 
      </div>
    </WrappedComponent>
  </CheckOrg>
</Connect(CheckOrg)>
`;
