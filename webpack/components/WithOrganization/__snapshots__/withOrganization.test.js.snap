// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`with organization should render a loading state when Katello org is still loading 1`] = `
<Connect(CheckOrg)
  history={
    Object {
      "push": [MockFunction],
    }
  }
  location={Object {}}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <CheckOrg
    default={[Function]}
    history={
      Object {
        "push": [MockFunction],
      }
    }
    layoutOrganization={
      Object {
        "id": 1,
        "title": "Test",
      }
    }
    loadOrganization={[Function]}
    location={Object {}}
    organization={
      Object {
        "loading": true,
      }
    }
    saveOrganization={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
  >
    <LoadingState
      loading={true}
      loadingText="Loading"
      timeout={300}
    />
  </CheckOrg>
</Connect(CheckOrg)>
`;

exports[`with organization should render a loading state when Katello org isn't loaded 1`] = `
<Connect(CheckOrg)
  history={
    Object {
      "push": [MockFunction],
    }
  }
  location={Object {}}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <CheckOrg
    default={[Function]}
    history={
      Object {
        "push": [MockFunction],
      }
    }
    layoutOrganization={
      Object {
        "id": 1,
        "title": "Test",
      }
    }
    loadOrganization={[Function]}
    location={Object {}}
    organization={Object {}}
    saveOrganization={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
  >
    <LoadingState
      loading={true}
      loadingText="Loading"
      timeout={300}
    />
  </CheckOrg>
</Connect(CheckOrg)>
`;

exports[`with organization should render the select org page when org is 'Any Organization' 1`] = `
<Connect(CheckOrg)
  history={
    Object {
      "push": [MockFunction],
    }
  }
  location={Object {}}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <CheckOrg
    default={[Function]}
    history={
      Object {
        "push": [MockFunction],
      }
    }
    layoutOrganization={
      Object {
        "title": "Any Organization",
      }
    }
    loadOrganization={[Function]}
    location={Object {}}
    organization={Object {}}
    saveOrganization={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
  >
    <Header
      title="Select Organization"
    >
      <HelmetWrapper
        defer={true}
        encodeSpecialCharacters={true}
      >
        <SideEffect(NullComponent)
          defer={true}
          encodeSpecialCharacters={true}
          title="Select Organization"
          titleAttributes={Object {}}
        >
          <NullComponent
            defer={true}
            encodeSpecialCharacters={true}
            title="Select Organization"
            titleAttributes={Object {}}
          />
        </SideEffect(NullComponent)>
      </HelmetWrapper>
    </Header>
    <Connect(withRouter(SetOrganization)) />
  </CheckOrg>
</Connect(CheckOrg)>
`;

exports[`with organization should render the wrapped component when katello org is Loaded 1`] = `
<Connect(CheckOrg)
  history={
    Object {
      "push": [MockFunction],
    }
  }
  location={Object {}}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <CheckOrg
    default={[Function]}
    history={
      Object {
        "push": [MockFunction],
      }
    }
    layoutOrganization={
      Object {
        "id": 1,
        "title": "Test",
      }
    }
    loadOrganization={[Function]}
    location={Object {}}
    organization={
      Object {
        "id": 1,
        "title": "Test",
      }
    }
    saveOrganization={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
  >
    <LoadingState
      loading={false}
      loadingText="Loading"
      timeout={300}
    >
      <WrappedComponent
        default={[Function]}
        history={
          Object {
            "push": [MockFunction],
          }
        }
        layoutOrganization={
          Object {
            "id": 1,
            "title": "Test",
          }
        }
        loadOrganization={[Function]}
        location={Object {}}
        organization={
          Object {
            "id": 1,
            "title": "Test",
          }
        }
        saveOrganization={[Function]}
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
        storeSubscription={
          Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "unsubscribe": [Function],
          }
        }
      >
        <div>
           Wrapped! 
        </div>
      </WrappedComponent>
    </LoadingState>
  </CheckOrg>
</Connect(CheckOrg)>
`;
